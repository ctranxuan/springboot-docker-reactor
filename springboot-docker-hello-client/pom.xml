<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.ws13.learning.springboot.docker</groupId>
  <artifactId>springboot-docker-hello-client</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>springboot-docker-hello-client</name>
  <description>Demo project with SpringBoot and Docker</description>

  <parent>
    <groupId>org.ws13.learning.springboot.docker</groupId>
    <artifactId>springboot-docker-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../springboot-docker-parent</relativePath>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-feign</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <logDate>default</logDate>
          <autoPull>true</autoPull>
          <images>
            <!-- Image holding the artifact of this build -->
            <image>
              <!-- Alias name which can used for linking containers during runtime -->
              <alias>helloclient</alias>
              <name>${docker.image.prefix}/${project.artifactId}:${project.version}</name>

              <!-- ....................................... -->
              <!-- Build configuration for creating images -->
              <!-- ....................................... -->
              <build>
                <from>frolvlad/alpine-oraclejdk8:slim</from>
                <!-- Assembly descriptor holds the reference to the created artifact-->
                <assembly>
                  <!-- Normally, one would only use 'docker-assembly.xml' if we could put the assembly descriptor
                       into src/main/docker But this confuses the alexec plugin, so we put it into another
                       directory and use an absolute pathe -->
                  <descriptor>${basedir}/src/main/docker/docker-assembly.xml</descriptor>
                </assembly>
                <!-- Expose ports -->
                <ports>
                  <port>8080</port>
                </ports>
                <!-- Default command for the build image -->
                <cmd>java -jar /maven/springboot-docker-hello-client.jar</cmd>
                <!--<cmd>/bin/sh</cmd>-->
              </build>

              <!-- ............................................................... -->
              <!-- Runtime configuration for starting/stopping/linking containers -->
              <!-- ............................................................... -->
              <run>
                <!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
                <ports>
                  <port>tomcat.port:8080</port>
                </ports>
                <wait>
                  <!-- Check for this URL to return a 200 return code .... -->
                  <url>http://${docker.host.address}:${tomcat.port}/access</url>
                  <!-- ... but at max 10 seconds -->
                  <time>10000</time>
                </wait>
                <log>
                  <prefix>HWC</prefix>
                  <color>cyan</color>
                </log>
                <links>
                  <link>helloworld:helloworld</link>
                </links>
              </run>
            </image>
          </images>
        </configuration>

        <!-- Hooking into the lifecycle -->
        <!--<executions>-->
        <!--<execution>-->
        <!--<id>start</id>-->
        <!--<phase>pre-integration-test</phase>-->
        <!--<goals>-->
        <!--<goal>build</goal>-->
        <!--<goal>start</goal>-->
        <!--</goals>-->
        <!--</execution>-->
        <!--<execution>-->
        <!--<id>stop</id>-->
        <!--<phase>post-integration-test</phase>-->
        <!--<goals>-->
        <!--<goal>stop</goal>-->
        <!--</goals>-->
        <!--</execution>-->
        <!--</executions>-->
      </plugin>
    </plugins>
  </build>


</project>
